;;; (use-modules (database interface postgres))
(define (write-chars n char lop)
  (define (iter n)
    (write-char char lop)
    (force-output lop)
    (if (eq? n 1)
        #t
        (iter (- n 1))))
  (iter n))

(define conn (pg:connectdb "dbname=test"))
(if (not (pg:exec conn "BEGIN TRANSACTION"))
     (write-line  (pg:error-message conn)))
     
(define trace-port (open-file "testlobseek.log" "w"))
(pg:trace conn trace-port)
(define lop (pg:lo-creat conn "w"))
(if (not lop) (write-line (pg:error-message conn)))
(define oid (pg:lo-get-oid lop))
(display "Created large object: ")(display oid)(newline)
(write-chars 50 #\X lop)
(write-line (string-append "pg:error-message is" (pg:error-message conn)))
(pg:lo-seek lop 1 0)
(write-chars 1 #\y lop)
(pg:lo-seek lop 3 0)
(write-chars 1 #\y lop)
(pg:lo-seek lop 5 0)
(write-chars 5 #\y lop)
(if (not (false-if-exception (close-port lop)))
   (begin (write-line "Close port failed.")
          (write-line (pg:error-message conn))))
(pg:untrace conn)
(close-port trace-port)
(let ((res (pg:exec conn "END TRANSACTION")))
     (if (not res) (write-line  (pg:error-message conn)))) 

(pg:exec conn "BEGIN")
(pg:lo-export conn oid "testlobseek.scm.out")
(pg:exec conn "END")

