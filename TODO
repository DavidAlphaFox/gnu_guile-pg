- 0.21

  - Remove compiled proc `pg-oid-status'.

  + Remove compiled/uncompiled synchronization procs.

    These are non-critical cruft from when sanity checking was necessary:

	pg-guile-pg-version
	pg-guile-pg-module-version
	pg-guile-pg-module-config-stamp

    Nowadays we just assume everyone is insane and go w/ that.  Users who want
    to track changes should check features directly instead of version numbers
    and time stamps, anyway.


- 1.x

  - Regularize error handling.

  - Use gh_/GH_ abstractions.

    This will make it easier to port Guile-PG to other versions of Guile
    and even other scheme implementations (long term).

  - Write tests for non-blocking query support.

  - Scan libpq-fe.h for coverage.


- Eventually

  - Enable post-install maintenance of (database postgres-meta).
    - Write/document proc that updates *class-defs*.
    - Also use it at "make" time.

  - Add to the manual a section giving an overview of using large-objects.

    This must explain the ideas of OID's as references to objects.  Also we
    need examples of using lo-streams. Perhaps a scheme implementation of
    lo-export and lo-import and, just for fun, a demonstration of executing
    scheme code contained in a large object.  There should also be an example
    of updating a table with a large number of large objects. Perhaps it could
    take a directory with lots of binary files in it and store each file in a
    large object in a table listing the names of the files.

  - Incorporate scheme result-iterator/stream procs.

    This should provide query-level functions like (pg:for-each) which
    iterates over a set of tuples returned from a query. Also provide a
    streams interface so that (pg:stream-cdr) and (pg:stream-car) return
    tuples.

  - Add a (pg:quote-sql-string-literal) procedure.

    This should take an arbitrary scheme string and return it suitably quoted
    so that it can appear safely inside single quotes in an sql statement. I
    think this should be written in C so that it's fast. To write it we need
    to make a careful examination of what characters are special in sql
    string-literals. These include, but may not be limited to: backslash,
    single quote, carriage return, linefeed, tab.

  - Keep an eye out for methodology to replace --with-libpq*



	Local Variables:
	mode: outline
	outline-regexp: "\\([ ][ ]\\)*[-+] "
	fill-column: 78
	End:
