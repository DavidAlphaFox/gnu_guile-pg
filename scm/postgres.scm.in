;;; postgres.scm --- wrap PostgreSQL libpq

;;    Guile-pg - A Guile interface to PostgreSQL
;;    Copyright (C) 1999,2000,2002,2003,2004 Free Software Foundation, Inc.
;;
;;    This program is free software; you can redistribute it and/or modify
;;    it under the terms of the GNU General Public License as published by
;;    the Free Software Foundation; either version 2 of the License, or
;;    (at your option) any later version.
;;
;;    This program is distributed in the hope that it will be useful,
;;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;    GNU General Public License for more details.
;;
;;    You should have received a copy of the GNU General Public License
;;    along with this program; if not, write to the Free Software
;;    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

;;    Author: Ian Grant <Ian.Grant@cl.cam.ac.uk>

(define-module (database postgres)
  #:use-module (database postgres-sup))

;; first things first: jump in the air a little and forget to hit the ground

(set-module-public-interface!
 (current-module)
 (module-public-interface (resolve-module '(database postgres-sup))))

;; Return a string containing the date and time at which @code{guile-pg}
;; was configured (this is probably the build time).
;;
(define-public (pg-guile-pg-module-config-stamp)
  "@GUILE_PG_STAMP@")

;; Return a string giving the version of the scheme module @code{postgres.scm}.
;; The string is always of the form "M.m" giving major and minor versions.
;; Unless something is wrong with the installation, this should be the same as
;; @code{pg-guile-pg-version}.
;;
(define-public (pg-guile-pg-module-version)
  "@VERSION@")

;; backward compatibility (not documented to encourage
;;                         usage of symbols in new code)
;;
;; WARNING: these will go away!

(define-public PGRES_EMPTY_QUERY    'PGRES_EMPTY_QUERY)
(define-public PGRES_COMMAND_OK     'PGRES_COMMAND_OK)
(define-public PGRES_TUPLES_OK      'PGRES_TUPLES_OK)
(define-public PGRES_COPY_OUT       'PGRES_COPY_OUT)
(define-public PGRES_COPY_IN        'PGRES_COPY_IN)
(define-public PGRES_BAD_RESPONSE   'PGRES_BAD_RESPONSE)
(define-public PGRES_NONFATAL_ERROR 'PGRES_NONFATAL_ERROR)
(define-public PGRES_FATAL_ERROR    'PGRES_FATAL_ERROR)

;;; postgres.scm ends here
